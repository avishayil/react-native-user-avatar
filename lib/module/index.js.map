{"version":3,"sources":["index.js"],"names":["UserAvatar","props","name","src","bgColor","bgColors","textColor","size","imageStyle","style","textStyle","borderRadius","component","console","warn","parseInt","inner","setInner","controller","AbortController","window","signal","then","isImage","abort","propTypes","PropTypes","string","array","number","object","any","defaultProps"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {View} from 'react-native';\r\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\r\n\r\nimport {\r\n  TextAvatar,\r\n  ImageAvatar,\r\n  CustomAvatar,\r\n} from './components/'; ;\r\nimport {\r\n  fetchImage,\r\n  getContainerStyle,\r\n  generateBackgroundStyle,\r\n} from './helpers';\r\n\r\nconst UserAvatar = (props) => {\r\n  let {\r\n    name,\r\n    src,\r\n    bgColor,\r\n    bgColors,\r\n    textColor,\r\n    size,\r\n    imageStyle,\r\n    style,\r\n    textStyle,\r\n    borderRadius,\r\n    component,\r\n  } = props;\r\n\r\n  // Validations\r\n  if (typeof (size) === 'string') {\r\n    console.warn('size prop should be a number');\r\n    size = parseInt(size);\r\n  }\r\n\r\n  const [inner, setInner] = useState(\r\n      <TextAvatar\r\n        textColor={textColor} size={size} name={name} style={textStyle} />);\r\n\r\n  useEffect(() => {\r\n    if (component) setInner(<CustomAvatar size={size} component={component} />);\r\n    if (src) {\r\n      const controller = new (AbortController || window.AbortController)();\r\n      fetchImage(src, {signal: controller.signal}).then((isImage) => {\r\n        if (isImage) {\r\n          setInner(\r\n              <ImageAvatar src={src} size={size} imageStyle={imageStyle} />,\r\n          );\r\n        }\r\n      });\r\n      return () => controller.abort();\r\n    }\r\n  }, [src, component]);\r\n\r\n  return (\r\n    <View style={[\r\n      generateBackgroundStyle(name, bgColor, bgColors),\r\n      getContainerStyle(size, src, borderRadius),\r\n      style]}\r\n    >\r\n      {inner}\r\n    </View>\r\n  );\r\n};\r\n\r\nUserAvatar.propTypes = {\r\n  name: PropTypes.string,\r\n  src: PropTypes.string,\r\n  bgColor: PropTypes.string,\r\n  bgColors: PropTypes.array,\r\n  textColor: PropTypes.string,\r\n  size: PropTypes.number,\r\n  imageStyle: PropTypes.object,\r\n  style: PropTypes.object,\r\n  textStyle: PropTypes.object,\r\n  borderRadius: PropTypes.number,\r\n  component: PropTypes.any,\r\n};\r\n\r\nUserAvatar.defaultProps = {\r\n  size: 32,\r\n  textColor: '#fff',\r\n  name: 'John Doe',\r\n  bgColors: [ // from https://flatuicolors.com/\r\n    '#2ecc71', // emerald\r\n    '#3498db', // peter river\r\n    '#8e44ad', // wisteria\r\n    '#e67e22', // carrot\r\n    '#e74c3c', // alizarin\r\n    '#1abc9c', // turquoise\r\n    '#2c3e50', // midnight blue\r\n  ],\r\n};\r\n\r\nexport default UserAvatar;\r\n"]}